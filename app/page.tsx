"use client"; // This must remain a client component

import { useState } from "react";

// Define the expected API response (which now contains HTML)
interface ApiResponse {
  html?: string;
  error?: string;
}

export default function Home() {
  const [quesId, setQesId] = useState<string>("");
  // This state will now hold the final HTML string
  const [solutionHtml, setSolutionHtml] = useState<string>("");
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  const fetchSolution = async () => {
    if (!quesId) {
      setError("Please enter a Question ID.");
      return;
    }

    setIsLoading(true);
    setError(null);
    setSolutionHtml("");

    try {
      // 1. Call our API route
      const solutionRes = await fetch(`/api/get-solution?quesId=${quesId}`);

      const data: ApiResponse = await solutionRes.json();

      if (!solutionRes.ok || data.error) {
        throw new Error(data.error || `API request failed`);
      }

      // 2. Set the highlighted HTML
      if (data.html) {
        setSolutionHtml(data.html);
      } else {
        throw new Error("No solution HTML was returned.");
      }
    } catch (err) {
      if (err instanceof Error) {
        setError(err.message);
      } else {
        setError("An unknown error occurred.");
      }
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <main
      style={{
        padding: "20px",
        fontFamily: "sans-serif",
        maxWidth: "900px",
        margin: "auto",
        background: "#0f0f0f",
        color: "white",
        minHeight: "100vh",
      }}
    >
      <h1>Code Viewer</h1>

      <div style={{ marginBottom: "20px" }}>
        <label
          htmlFor="quesId"
          style={{ marginRight: "10px", fontSize: "1.1rem" }}
        >
          Question ID:
        </label>
        <input
          type="text"
          id="quesId"
          value={quesId}
          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
            setQesId(e.target.value)
          }
          placeholder="e.g., 1424"
          style={{ padding: "10px", fontSize: "1rem", width: "200px" }}
        />
      </div>

      <button
        onClick={fetchSolution}
        disabled={isLoading}
        style={{ padding: "10px 20px", fontSize: "1.1rem", cursor: "pointer" }}
      >
        {isLoading ? "Loading..." : "Get Solution"}
      </button>

      {error && (
        <p style={{ color: "#ff8a8a", marginTop: "15px" }}>Error: {error}</p>
      )}

      {solutionHtml && (
        // 3. Render the HTML using dangerouslySetInnerHTML
        // This is safe because the HTML is generated by *your own* server-side API.
        <div
          style={{ marginTop: "20px" }}
          dangerouslySetInnerHTML={{ __html: solutionHtml }}
        />
      )}
    </main>
  );
}
